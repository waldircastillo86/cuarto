#include <iostream>
#include <vector>

using namespace std;

// Función para combinar dos subarreglos ordenados
void merge(vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    // Crear arreglos temporales
    vector<int> L(n1), R(n2);

    // Copiar datos a los arreglos temporales L[] y R[]
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    // Combinar los arreglos temporales de vuelta en arr[]
    int i = 0; // Índice inicial de primer subarreglo
    int j = 0; // Índice inicial de segundo subarreglo
    int k = left; // Índice inicial del arreglo combinado
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copiar los elementos restantes de L[], si hay alguno
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copiar los elementos restantes de R[], si hay alguno
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// Función recursiva para ordenar el subarreglo
void mergeSort(vector<int>& arr, int left, int right) {
    if (left < right) {
        // Encuentra el punto medio
        int mid = left + (right - left) / 2;

        // Ordena la primera y segunda mitad
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);

        // Combina las mitades ordenadas
        merge(arr, left, mid, right);
    }
}

// Función para imprimir el arreglo
void printArray(const vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << "\n";
}

// Función principal
int main() {
    vector<int> arr = {12, 11, 13, 5, 6, 7};
    int n = arr.size();

    cout << "Arreglo original:\n";
    printArray(arr);

    mergeSort(arr, 0, n - 1);

    cout << "Arreglo ordenado:\n";
    printArray(arr);

    return 0;
}
